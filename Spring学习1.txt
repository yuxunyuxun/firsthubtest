配置文件位置：
main/resources/applicationContext.xml

1、创建对象
<bean id="stu" class="com.bjpowernode.pojo.Student"></bean>
创建学生对象，等同于 Student stu = new Student();
id:就是创建的对象的名称；
class:就是创建的对象的类型，底层通过反射构建对象；

由spring容器进行对象的创建
如果想从spring容器中取出对象，则要先创建容器对象，并启动才可以取对象；
ApplicationContext ac = new ClassPathXmlApplicationContext("applicationContext.xml");
Student stu = ac.get Bean("stu");

注：spring容器在启动时，就创建了所有的对象... ...


2、为对象赋值
	*简单类型赋值：
	<bean id="stu" class="com.bjpowernode.pojo.Student">    -----------> spring容器负责对象的创建
		<property name="name" value="张三">	-----------> spring容器依赖注入值
		<property name="age" value="22">
	</bean>

	*引用类型赋值
	<bean id="school" class="com.yuxun.pojo2.School">
		<property name="name" value="清华大学"></property>	----> 相当于赋值
		<property name="address" value="海淀区"></property> ----> 相当于赋值
	</bean>
	
	<bean id="stu" class="com.yuxun.pojo2.Student">
		<property name="name" value="李四"></property>		----> 依赖注入
		<property name="age" value="23"></property>			----> 依赖注入
		<property name="school" ref="school"></property>	----> 依赖注入(依赖注入的对象一定是bean工厂中创建过的对象)
	</bean>

3、基于xml的IOC
	a、创建对象
		<bean id="stu" class="com.yuxun.pojo.Student"></bean>
	b、给创建的对象赋值
		*使用setter注入
		  注入分为简单类型注入和引用类型注入
			1、简单类型注入值使用value属性；
			2、引用类型注入值使用ref属性；
		  必须要注意：使用setter注入必须提供无参的构造方法，必须提供setXXX()方法。

		*使用构造方法注入
		Student stu = new Student("张三",22);
				1、使用构造方法的参数名称进行注入;
					<bean id="school" class="com.springYuxun.pojo.School">
						<constructor-arg name="name" value="清华大学"></constructor-arg>
						<constructor-arg name="address" value="海淀区"></constructor-arg>
					</bean>
				2、使用构造方法参数的下标注入;
					<bean id="stu" class="com.springYuxun.pojo.Student">
						<constructor-arg index="0" value="钱七"></constructor-arg>
						<constructor-arg index="1" value="22"></constructor-arg>
						<constructor-arg index="2" ref="school"></constructor-arg>
					</bean>
				3、使用默认的构造方法的参数的顺序注入值;
				<bean id="stuSequence" class="com.springYuxun.pojo.Student">
					<constructor-arg value="陈十"></constructor-arg>
					<constructor-arg value="22"></constructor-arg>
					<constructor-arg ref="school"></constructor-arg>
				</bean>

4、基于注解的IOC
	也称为DI(Dependency Injection),它是IOC的具体实现的技术；
	将原来由xml文件进行的创建对象并依赖注入，改为由注解进行。
	
	基于注解的IOC，必须要在Spring的核心配置文件中添加包扫描；
	
	A、创建对象的注解
		@Component:可以创建任意对象；--创建的对象的默认名称是类名的驼峰命名法，也可以指定对象的名称@Component("指定名称");
		@Controller:专门用来创建控制器的对象(Servlet)，这种对象可以接收用户的请求，可以返回处理结果给客户端;
		@Service:专门用来床架业务逻辑层的对象，负责向下访问数据访问层，处理完毕后的结果返回给界面层;
		@Reposite:专门用来创建数据访问层的对象，负责数据库中的增删改查所有操作
	B、依赖注入的注解
		简单类型(8种基本类型+String)的注入
		@Value:用来给简单类型注入值
		
		引用类型的注入
		1、@Autowired:使用类型注入值，从整个Bean工厂中搜索同源类型的对象进行注入;
			只有同源类型才可注入-什么是同源类型：
				a、被注入的类型(Student中的school)与注入的类型是完全相同的类型;
				b、被注入的类型(Student中的school父)与注入的类型(子)是父子类;
				c、被注入的类型(Student中的school接口)与注入的类型(实现类)是接口和实现类的类型;
					子类不管是有参构造方法调用还是无参构造方法调用，默认都会调用父类无参构造方法；
			注意:在有父子类的情况下，使用按类型注入，就意味着有多个可注入的对象，此时按照名称进行二次筛选，选中与被注入对象相同
			名称的对象进行注入；
		2、@Autowired
		   @Qualifier("对象名称"):使用名称注入值，从整个Bean工厂中搜索相同名称的对象进行注入;
		  注意：如果有父子类的情况下，直接按名称进行注入值；
	
5、填报包扫描的方式
	a、单个包扫描(推荐使用)
		<context:component-scan base-package="com.yuxun.controller"></context:component-scan>
		<context:component-scan base-package="com.yuxun.service"></context:component-scan>
		<context:component-scan base-package="com.yuxun.dao"></context:component-scan>
		
	b、多个包扫描，多个包之间以逗号或空格或分号分割
		<context:component-scan base-package="com.yuxun.controller,com.yuxun.service,com.yuxun.dao"></context:component-scan>
	
	c、扫描根包(不推荐)
		<context:component-scan base-package="com.yuxun"></context:component-scan>
		会降低容器启动的速度，导致多做无用功。

6、为应用指定多个Spring配置文件
	当项目越来越大，需要多人合作开发，一个配置文件就存在很大的隐患(不能大家一起霍霍一个文件)；
	a、拆分配置文件的策略
		*按层拆
			applicationContext_controller.xml
				<bean id="uController" class="com.yuxun.controller.UsersController">
				<bean id="bController" class="com.yuxun.controller.BookController">
			applicationContext_service.xml
				<bean id="uService" class="com.yuxun.controller.UsersService">
				<bean id="bService" class="com.yuxun.controller.BookService">
			applicationContext_mapper.xml
				<bean id="uMapper" class="com.yuxun.controller.UsersMapper">
				<bean id="bMapper" class="com.yuxun.controller.BookMapper">
		*按功能拆
			applicationContext_users.xml
				<bean id="uController" class="com.yuxun.controller.UsersController">
				<bean id="uService" class="com.yuxun.controller.UsersService">
				<bean id="uMapper" class="com.yuxun.controller.UsersMapper">
			applicationContext_users.xml
				<bean id="bController" class="com.yuxun.controller.BookController">
				<bean id="bService" class="com.yuxun.controller.BookService">
				<bean id="bMapper" class="com.yuxun.controller.BookMapper">
				
7、spring配置文件的整合
	a、单个文件导入
		 <import resource="applicationContext_mapper.xml"></import>
		 <import resource="applicationContext_service.xml"></import>
		 <import resource="applicationContext_controller.xml"></import>
	b、批量导入
		 <import resource="applicationContext_*.xml"></import>
		
8、面向切面编程AOP
	AOP(Aspect Orient Programming)，面向切面编程。
	切面：公共的，通用的，重复的功能被称为切面，面向切面编程就是将切面提取出来，单独开发，
在需要调用方法中通过动态代理的方式进行织入。

9、手写AOP框架
	业务：图书购买业务
	切面：事务
	a、第一个版本：业务和切面紧耦合在一起，没有拆分；
	b、第二个版本：使用子类代理；
	c、第三个版本：使用静态代理拆分业务和切面，业务和业务接口已拆分，此时切面紧耦合在业务中。
	d、第四个版本：使用静态代理拆分业务和业务接口，切面和切面接口。
	e、第五个版本：使用动态代理完成第四个版本优化。-- 继承父类功能的基础上再添加别的功能。

10、Spring支持的AOP的实现
	Spring支持AOP的编程，常用的有以下几种：
	1)Before通知：在目标方法被调用前调用，涉及接口org.springframework.aop.MethodBeforeAdvice;
	2)After通知：在目标方法被调用前调用，涉及接口为org.springframework.aop.AfterReturningAdvice;
	3)Throws通知：目标方法抛出异常时调用，涉及接口org.springframework.aop.ThrowsAdvice;
	4)Around通知：拦截对目标对象方法调用，涉及接口org.aopalliance.intercept.MethInterceptor;

11、AOP常用的术语
	1)切面：就是那些重复的，公共的，通用的功能称为切面，例如：日志、事务、权限。
	2)连接点：就是目标方法.因为在目标方法中要实现目标方法的功能和切面功能。
	3)切入点(Pointcut)：指定切入的位置，多个连接点构成切入点，切入点可以是一个目标方法，可以是一个类中的所有方法，
可以是某个包下的所有类中的方法。
	4)目标对象：操作谁，谁就是目标对象。
	5)通知(Advice)：来指定切入的时机，是在目标方法执行前还是执行后还是出错时，还是环绕目标方法切入切面功能。
	
12、什么是AspectJ框架
	AspectJ是一个优秀的面向切面的框架，它扩展了Java语言，提供了强大的切面实现。它因为是基于java语言开发的，所以无缝扩展，
easy to learn and use（易学易用）。

13、AspectJ常见通知类型
	AspectJ中常用的通知有四种类型：
		1)前置通知@Before
		2)后置通知@AfterReturning
		3)环绕通知@Around 
		4)最终通知@After 
		5)定义切入点@Pointcut(了解)

14、AspectJ的切入点表达式(必须掌握)
	规范的公式：
		excution(访问权限 方法返回值 方法生命(参数) 异常类型)
	简化后的公式：
		excution( 方法返回值 方法声明(参数))
	
	用到的符号：
		* 代表任意个任意的字符(通配符)
		.. 如果出现在方法的参数中，则代表任意参数
		   如果出现在路径中，则代表本路径及其所有的子路径
	
	示例：
		execution(public * * (..)):任意的公共方法；
		execution(* set*(..)):任何一个以"set"开始的方法；
		execution(* com.xyz.service.impl.*.*(..))：任意的返回值类型，在com.xyz.service.impl包下的任意类的任意方法的任意参数。
		execution(* com.xyz.service..*.*(..))：任意的返回值类型，在com.xyz.service及其子包下的任意类的任意方法的任意参数。
		
		execution(* *..service.*.*(..))：service之前可以有任意的子包;
		execution(* *.service.*.*(..))：service之前只有一个包;

15、Aspect的前置通知@Before
	在目标方法执行前切入切面功能，在切面方法中不可以获得目标方法的返回值，只能得到目标方法的签名(访问权限、返回值、方法名、参数)。
	
	pom.xml中除了添加spring-context的依赖之外，还有spring-aspects的依赖
	<dependency>
		<groupId>org.springframework</groupId>
		<artifactId>spring-aspects</artifactId>
		<version>5.2.5.RELEASE</version>
	</dependency>
	
	前置通知实现步骤：
		1、创建业务接口
		2、创建业务实现
		3、创建切面类
		4、在applicationContext.xml文件中进行切面绑定
	无论何种代理方式，用接口来拿，就不会有问题

16、Aspects框架切换JDK动态代理和CGLib动态代理
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>  =====> 默认是JDK动态代理，取时必须使用接口类型
	
	<aop:aspectj-autoproxy proxy-target-class="true"></aop:aspectj-autoproxy> ====> 设置为CGLib子类代理，可以使用接口和实现类接

17、后置通知方法
	返回值的处理问题：
		在后置通知方法中，使用切面方法对目标方法的返回值进行改变，再从测试方法中验证发现，
		如果目标方法的返回值是8种基本类型或String的类型，则不可改变；
		如果目标方法的返回值是引用类型，则可以改变。

18、环绕通知@Around
	它是通过拦截目标方法的方式，在目标方法前后增强功能的通知，它是功能最强大的通知，一般事务使用此通知，它可以轻易的改变目标方法
的返回值。

19、给切入点表达式起别名：@Pointcut
	如果多个切面，切入到同一个切入点，可以使用别名简化开发，
	使用@Pointcut注解，创建一个空方法，此方法的名称就是别名；
	
20、SM整合的步骤
	1、建表
	2、新建项目，选中quickstart模板
	3、修改目录
	4、修改pom.xml文件，添加相关的依赖(使用老师提供)
	5、添加MyBatis响应的模板(sqlMapConfig.xml和XXXMapper.xml文件)
	6、添加SqlMapConfig.xml文件(MyBatis核心配置文件)














		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		